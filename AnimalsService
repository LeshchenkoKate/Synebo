@RestResource(urlMapping='/Animal/*')
global with sharing class AnimalsService {
    @HttpGet
    global static Animal__c getAnimalByID() {
         RestRequest request = RestContext.request;
        // grab the caseId from the end of the URL
        String AnimId = request.requestURI.substring(
          request.requestURI.lastIndexOf('/')+1);
        if (!AnimId.isNumeric()) {
            RestContext.response.statusCode = 400;
            return null;
        }

        Decimal anId = Decimal.valueOf(AnimId);
        List<Animal__c> result = new List<Animal__c>();
        result =  [SELECT AnimalId__c, Name__c, Eats__c, Says__c 
                        FROM Animal__c
                        WHERE AnimalId__c = :anId];
        if (result.isEmpty()) {
            //add new record in my db
            AnimalsCallouts.makeGetCallout(Integer.valueOf(anId));
            result = [SELECT AnimalId__c, Name__c, Eats__c, Says__c 
                        FROM Animal__c
                        WHERE AnimalId__c = :anId];
            if (!result.isEmpty()) {
                return result.get(0);
            } else {
                RestContext.response.statusCode = 404;
                return null;
            }
        } else {
            return result.get(0);
        }
        
    }
    @HttpPost
    global static ID createAnimal(String name, String eats,
        String says) {
        Animal__c animal = new Animal__c(
            Name__c=name,
            Eats__c=eats,
            Says__c=says);
        insert animal;
        return animal.Id;
    }   
   
}
